variables:
  buildConfiguration: 'Release'

trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - content/*
    exclude:
    - backend/*
    - frontend/*
    - .gitignore
    - LICENSE
    - README.md

jobs:
- job: ContentBuild
  displayName: Builds and Processes any new content
  workspace:
    clean: all
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: dotnet build --configuration $(buildConfiguration)
    displayName: Build
    workingDirectory: $(system.defaultWorkingDirectory)/content/ContentManager
  - script: mkdir -p Coverage && dotnet test "--logger:trx;LogFileName=results.trx" -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura -p:CoverletOutput=./Coverage/ 2>&1 | tee Coverage/coverage.output
    displayName: Test
    continueOnError: true
    workingDirectory: $(system.defaultWorkingDirectory)/content/ContentManager/ContentManager.Test
  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: TestResults/*.trx
      searchFolder: $(System.DefaultWorkingDirectory)/content/ContentManager/ContentManager.Test
  - script: dotnet reportgenerator -reports:Coverage/coverage.cobertura.xml -targetdir:Coverage/Report -reporttypes:HTMLInline
    displayName: Reports
    workingDirectory: $(system.defaultWorkingDirectory)/content/ContentManager/ContentManager.Test
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation:  $(system.defaultWorkingDirectory)/content/ContentManager/ContentManager.Test/Coverage/coverage.cobertura.xml
      reportDirectory: $(system.defaultWorkingDirectory)/content/ContentManager/ContentManager.Test/Coverage/Report
  - script: node checkCoverage.js
    displayName: Coverage Threshold
    workingDirectory: $(system.defaultWorkingDirectory)/content/ContentManager/ContentManager.Test/scripts
